[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "makani"
authors = [
    { name="Thorsten Kurth", email = "tkurth@nvidia.com" },
    { name="Boris Bonev", email = "bbonev@nvidia.com" },
    { name="Jean Kossaifi", email = "jkossaifi@nvidia.com" },
    { name="Animashree Anandkumar" },
    { name="Kamyar Azizzadenesheli" },
    { name="Noah Brenowitz" },
    { name="Ashesh Chattopadhyay" },
    { name="Yair Cohen" },
    { name="David Hall" },
    { name="Peter Harrington" },
    { name="Pedram Hassanzadeh" },
    { name="Christian Hundt" },
    { name="Alexey Kamenev"},
    { name="Karthik Kashinath" },
    { name="Zongyi Li" },
    { name="Morteza Mardani" },
    { name="Jaideep Pathak" },
    { name="Mike Pritchard" },
    { name="David Pruitt" },
    { name="Sanjeev Raja" },
    { name="Shashank Subramanian" },
]

maintainers = [
    { name="Thorsten Kurth", email = "tkurth@nvidia.com" },
    { name="Boris Bonev", email = "bbonev@nvidia.com" },
]

description = "Massively parallel training of machine-learning based weather and climate models"
readme = "README.md"
requires-python = ">=3.10"

classifiers = [
    "Development Status :: Alpha",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]

dynamic = ["version"]

dependencies = [
    "torch>=2.0.0",
    "numpy>=1.22.4",
    "numba>=0.50.0",
    "nvidia_dali_cuda110>=1.16.0",
    "nvidia-physicsnemo>=1.0.0",
    "torch-harmonics>=0.6.5",
    "tensorly>=0.8.1",
    "tensorly-torch>=0.4.0",
    "numba>=0.50.0",
]

[tool.setuptools.dynamic]
version = {attr = "makani.__version__"}

[tool.setuptools.packages.find]
    include = ["makani*"]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "black>=22.10.0",
    "coverage>=6.5.0",
]

all = [
    "wandb>=0.13.7",
    "imageio>=2.28.1",
    "moviepy>=1.0.3",
    "tqdm>=4.60.0",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ""
testpaths = [
    "tests",
    "makani",
]

[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[project.entry-points."makani.models"]
AFNOv1   = "makani.models.networks.afnonet:AdaptiveFourierNeuralOperatorNet"
AFNO     = "makani.models.networks.afnonet_v2:AdaptiveFourierNeuralOperatorNet"
FNO      = "makani.models.networks.sfnonet:FourierNeuralOperatorNet"
SFNO     = "makani.models.networks.sfnonet:SphericalFourierNeuralOperatorNet"
DebugNet = "makani.models.networks.debug:DebugNet"
ViT      = "makani.models.networks.vit:VisionTransformer"

[project.entry-points."modulus.models"]
SFNO     = "makani.models.networks.sfnonet:SFNO"
